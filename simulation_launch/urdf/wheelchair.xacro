<?xml version="1.0"?>
<robot name="alphabot2" xmlns:xacro="http://ros.org/wiki/xacro">
    <!-- define robot constants -->
    <xacro:property name="base_width" value="0.2"/>
    <xacro:property name="base_height" value="0.2"/>
    <xacro:property name="base_depth" value="0.3"/>

    <xacro:property name="wheel_radius" value="0.05"/>
    <xacro:property name="wheel_width" value="0.01"/>
    <xacro:property name="wheel_zoff" value="0.125"/>

    <xacro:property name="caster_radius" value="0.015"/>
    <xacro:property name="caster_xoff" value="${(base_width/2)-caster_radius}"/>

    <xacro:property name="camera_size" value="0.01"/>
    <xacro:property name="camera_zoff" value="${base_depth/2}"/>

    <!-- define intertial property macros -->
    <xacro:macro name="box_inertia" params="m w h d">
        <inertial>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <mass value="${m}"/>
            <inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (w*w + d*d)}" iyz="0.0" izz="${(m/12) * (w*w + h*h)}"/>
        </inertial>
    </xacro:macro>

    <xacro:macro name="cylinder_inertia" params="m r h">
        <inertial>
            <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
            <mass value="${m}"/>
            <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy = "0" ixz = "0" iyy="${(m/12) * (3*r*r + h*h)}" iyz = "0" izz="${(m/2) * (r*r)}"/>
        </inertial>
    </xacro:macro>

    <xacro:macro name="sphere_inertia" params="m r">
        <inertial>
            <mass value="${m}"/>
            <inertia ixx="${(2/5) * m * (r*r)}" ixy="0.0" ixz="0.0" iyy="${(2/5) * m * (r*r)}" iyz="0.0" izz="${(2/5) * m * (r*r)}"/>
        </inertial>
    </xacro:macro>

    <!--base footprint-->
    <link name="base_footprint">
        <origin xyz="0 0 0"/>
    </link>

    <!-- wheelchair base -->
    <link name="base_link">
        <visual>
            <geometry>
                <box size="${base_width} ${base_height} ${base_depth}"/>
            </geometry>
            <material name="Cyan">
                <color rgba="0 1.0 1.0 1.0"/>
            </material>
        </visual>
        <collision>
            <geometry>
                <box size="${base_width} ${base_height} ${base_depth}"/>
            </geometry>
        </collision>
        <xacro:box_inertia m="10" w="${base_width}" h="${base_height}" d="${base_depth}"/>
    </link>

    <joint name="base_joint" type="fixed">
        <parent link="base_footprint"/>
        <child link="base_link"/>
        <origin xyz="0 0 ${base_depth/2}" rpy="0 0 0"/>
    </joint>

    <!-- drive wheels -->
    <xacro:macro name="drive_wheel" params="prefix y_reflect">
        <link name="${prefix}_link">
            <visual>
                <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
                </geometry>
                <material name="Gray">
                    <color rgba="0.5 0.5 0.5 1.0"/>
                </material>
            </visual>
            <collision>
                <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
                </geometry>
            </collision>
            <xacro:cylinder_inertia m="5" r="${wheel_radius}" h="${wheel_width}"/>
        </link>

        <joint name="${prefix}_joint" type="continuous">
            <parent link="base_link"/>
            <child link="${prefix}_link"/>
            <origin xyz="0 ${y_reflect*base_height/2} ${-wheel_zoff}" rpy="0 0 0"/>
            <axis xyz="0 1 0"/>
        </joint>
    </xacro:macro>

    <xacro:drive_wheel prefix="drive_wheel_l" y_reflect="1.0" />
    <xacro:drive_wheel prefix="drive_wheel_r" y_reflect="-1.0"/>

    <!-- caster wheels -->
    <xacro:macro name="caster_wheel" params="prefix x_reflect">
        <link name="${prefix}_link">
            <visual>
                <origin xyz="0 0 0" rpy="0 0 0"/>
                <geometry>
                    <sphere radius="${caster_radius}"/>
                </geometry>
                <material name="Cyan">
                    <color rgba="0 1.0 1.0 1.0"/>
                </material>
            </visual>
            <collision>
                <origin xyz="0 0 0" rpy="0 0 0"/>
                <geometry>
                    <sphere radius="${caster_radius}"/>
                </geometry>
            </collision>

            <xacro:sphere_inertia m="1" r="${caster_radius}"/>
        </link>

        <!-- 0 friction for gazebo (unless it does weird stuff)-->
        <gazebo reference="${prefix}_link">
            <mu1 value="0"/>
            <mu2 value="0"/>
        </gazebo>

        <joint name="${prefix}_joint" type="fixed">
            <parent link="base_link"/>
            <child link="${prefix}_link"/>
            <origin xyz="${x_reflect*caster_xoff} 0 ${caster_radius-wheel_radius-wheel_zoff}" rpy="0 0 0"/>
        </joint>
    </xacro:macro>

    <xacro:caster_wheel prefix="caster_wheel_f" x_reflect="1.0"/>
    <xacro:caster_wheel prefix="caster_wheel_b" x_reflect="-1.0"/>

    <!-- diff drive plugin -->
    <gazebo>
        <plugin name='diff_drive' filename='libgazebo_ros_diff_drive.so'>
            <update_rate>30</update_rate>

            <!-- wheels -->
            <left_joint>drive_wheel_l_joint</left_joint>
            <right_joint>drive_wheel_r_joint</right_joint>

            <!-- kinematics -->
            <wheel_separation>0.2</wheel_separation>
            <wheel_diameter>0.1</wheel_diameter>

            <!-- limits -->
            <max_wheel_torque>100</max_wheel_torque>
            <max_wheel_acceleration>5.0</max_wheel_acceleration>

            <!-- input -->
            <!-- subscribe to the /cmd_vel topic-->
            <command_topic>cmd_vel</command_topic>

            <!-- output -->
            <!-- When true, publish wheel odometry information -->
            <publish_odom>true</publish_odom>

            <!-- When true, publish coordinate transform from odom to base_footprint -->
            <!-- The robot localization package will publish this information -->
            <publish_odom_tf>true</publish_odom_tf>
            
            <!-- When true, publish coordinate transform from base_link to the wheels -->
            <!-- The robot_state_publisher package is often used to publish this transform --> 
            <!-- There will be a warning if both the robot state publisher and the differential drive package publishes the wheel transform (one of them will be ignored) -->
            <publish_wheel_tf>true</publish_wheel_tf>

            <odometry_frame>odom</odometry_frame>
            <robot_base_frame>base_footprint</robot_base_frame>
        </plugin>
    </gazebo>

    <!-- cameras -->
    <xacro:macro name="camera_link" params="prefix x_reflect y_reflect angle_number">
        <link name="camera_${prefix}_link">
            <visual>
                <geometry>
                    <box size="${camera_size} ${camera_size} ${camera_size}"/>
                </geometry>
                <material name="Red">
                    <color rgba="1.0 0.0 0.0 1.0"/>
                </material>
            </visual>
            <collision>
                <geometry>
                    <box size="${camera_size} ${camera_size} ${camera_size}"/>
                </geometry>
            </collision>
            <xacro:box_inertia m="1" w="${camera_size}" h="${camera_size}" d="${camera_size}"/>
        </link>

        <joint name="camera_${prefix}_joint" type="fixed">
            <parent link="base_link"/>
            <child link="camera_${prefix}_link"/>
            <origin xyz="${x_reflect*base_width/2} ${y_reflect*base_height/2} ${camera_zoff}" rpy="0 0 ${angle_number*pi/2}"/>
        </joint> 
    </xacro:macro>

    <!-- xacro:camera_link prefix="front" x_reflect="1.0" y_reflect="0.0" angle_number="0"/-->
    <xacro:camera_link prefix="left" x_reflect="0.0" y_reflect="1.0" angle_number="1"/>
    <xacro:camera_link prefix="back" x_reflect="-1.0" y_reflect="0.0" angle_number="2"/>
    <xacro:camera_link prefix="right" x_reflect="0.0" y_reflect="-1.0" angle_number="3"/>

    <gazebo reference="camera_left_link">
        <sensor name="camera_left" type="wideanglecamera">
            <camera>
                <horizontal_fov>3.14159265359</horizontal_fov>
                <image>
                    <width>320</width>
                    <height>320</height>
                    <format>R8G8B8</format>
                </image>
                <clip>
                    <near>0.02</near>
                    <far>100</far>
                </clip>
                <lens>
                    <type>stereographic</type>
                    <scale_to_hfov>true</scale_to_hfov>
                    <cutoff_angle>1.5707</cutoff_angle>
                    <env_texture_size>512</env_texture_size>
                </lens>
            </camera>
            <always_on>1</always_on>
            <update_rate>30</update_rate>
            <plugin filename="libgazebo_ros_camera.so" name="camera_left_plugin">
                <alwaysOn>true</alwaysOn>
                <updateRate>30</updateRate>
                <cameraName>camera_left</cameraName>
                <imageTopicName>camera_left/image_raw</imageTopicName>
                <cameraInfoTopicName>camera_left/camera_info</cameraInfoTopicName>
                <frameName>camera_left_link</frameName>
                <distortionK1>0.0</distortionK1>
                <distortionK2>0.0</distortionK2>
                <distortionK3>0.0</distortionK3>
                <distortionT1>0.0</distortionT1>
                <distortionT2>0.0</distortionT2>
            </plugin>
        </sensor>
    </gazebo>
    
    <gazebo reference="camera_back_link">
        <sensor name="camera_back" type="wideanglecamera">
            <camera>
                <horizontal_fov>3.14159265359</horizontal_fov>
                <image>
                    <width>320</width>
                    <height>320</height>
                    <format>R8G8B8</format>
                </image>
                <clip>
                    <near>0.02</near>
                    <far>100</far>
                </clip>
                <lens>
                    <type>stereographic</type>
                    <scale_to_hfov>true</scale_to_hfov>
                    <cutoff_angle>1.5707</cutoff_angle>
                    <env_texture_size>512</env_texture_size>
                </lens>
            </camera>
            <always_on>1</always_on>
            <update_rate>30</update_rate>
            <plugin filename="libgazebo_ros_camera.so" name="camera_back_plugin">
                <alwaysOn>true</alwaysOn>
                <updateRate>30</updateRate>
                <cameraName>camera_back</cameraName>
                <imageTopicName>camera_back/image_raw</imageTopicName>
                <cameraInfoTopicName>camera_back/camera_info</cameraInfoTopicName>
                <frameName>camera_back_link</frameName>
                <distortionK1>0.0</distortionK1>
                <distortionK2>0.0</distortionK2>
                <distortionK3>0.0</distortionK3>
                <distortionT1>0.0</distortionT1>
                <distortionT2>0.0</distortionT2>
            </plugin>
        </sensor>
    </gazebo>

    <gazebo reference="camera_right_link">
        <sensor name="camera_right" type="wideanglecamera">
            <camera>
                <horizontal_fov>3.14159265359</horizontal_fov>
                <image>
                    <width>320</width>
                    <height>320</height>
                    <format>R8G8B8</format>
                </image>
                <clip>
                    <near>0.02</near>
                    <far>100</far>
                </clip>
                <lens>
                    <type>stereographic</type>
                    <scale_to_hfov>true</scale_to_hfov>
                    <cutoff_angle>1.5707</cutoff_angle>
                    <env_texture_size>512</env_texture_size>
                </lens >
            </camera>
            <always_on>1</always_on>
            <update_rate>30</update_rate>
            <plugin filename="libgazebo_ros_camera.so" name="camera_right_plugin">
                <alwaysOn>true</alwaysOn>
                <updateRate>30</updateRate>
                <cameraName>camera_right</cameraName>
                <imageTopicName>camera_right/image_raw</imageTopicName>
                <cameraInfoTopicName>camera_right/camera_info</cameraInfoTopicName>
                <frameName>camera_right_link</frameName>
                <distortionK1>0.0</distortionK1>
                <distortionK2>0.0</distortionK2>
                <distortionK3>0.0</distortionK3>
                <distortionT1>0.0</distortionT1>
                <distortionT2>0.0</distortionT2>
            </plugin>
        </sensor>
    </gazebo>
</robot>